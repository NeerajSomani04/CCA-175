Problem Statement:-
        Develop Spark application using Scala to get daily revenue per department.
        (In other words) Get all the completed or closed orders and then compute total revenue for each day for each department.
        Print order_date, department_name and order_revenue
Solution:-

scenario 1 - If data is in text file format:
       val departments = sc.textFile("/user/dkothari/retail_db/departments")
       val departmentsMap = departments.map( dep => (dep.split(",")(0).toInt, dep.split(",")(1) ))
       
       val categories = sc.textFile("/user/dkothari/retail_db/categories")
       val categoriesMap = categories.map( c => (c.split(",")(1).toInt, c.split(",")(0).toInt) )
       val catDepJoin = categoriesMap.join(departmentsMap).map( rec => rec._2)
       
       val products = sc.textFile("/user/dkothari/retail_db/products")
       val productsMap = products.map( product => (product.split(",")(1).toInt, product.split(",")(0).toInt))
       val prodCatJoin = productsMap.join(catDepJoin).map(rec => rec._2)
       
       val orderItems = sc.textFile("/user/dkothari/retail_db/order_items")
       val orderItemsMap = orderItems.map(orderItem => (orderItem.split(",")(2).toInt,(orderItem.split(",")(1).toInt, orderItem.split(",")(4).toFloat)))
       val orderItemProdJoin = prodCatJoin.join(orderItemsMap).map( rec => (rec._2._2._1, (rec._2._2._2, rec._2._1))) 

       val orders = sc.textFile("/user/dkothari/retail_db/orders")
       val ordersMap = orders.filter( order => (order.split(",")(3) == "CLOSED" || order.split(",")(3) == "COMPLETED")).map( order => (order.split(",")(0).toInt, order.split(",")(1)))
       val orderItemOrderJoin = ordersMap.join(orderItemProdJoin).map( rec => ((rec._2._1, rec._2._2._2),rec._2._2._1))
       
       val DailyRevenue = orderItemOrderJoin.reduceByKey((total , subtotal) => total+subtotal).sortByKey(ascending=false)
       
       ------------------------------------------------------------------------------------------------------------------
       --> Sort data in ascending order by date and descending order by revenue
       val DailyRevenue = orderItemOrderJoin.reduceByKey((total , subtotal) => total+subtotal)
       val SortedDailyRevenue = DailyRevenue.map( rec => ((rec._1._1, -rec._1._2), rec)).sortByKey()
      
      ------------------------------------------------------------------------------------------------------------------------
Scenario 2 - If data is in json or any other format to create dataframe.
        
        //ORDERS
val orders=sc.textFile("file:///home/cloudera/Desktop/data/retail_db/orders")
case class Order(
  order_id: Int,
  order_date: String,
  order_customer_id: Int,
  order_status: String)

val ordersDF=orders.map(rec=>{
val b=rec.split(",") 
Order(b(0).toInt,b(1),b(2).toInt,b(3))
}).toDF

ordersDF.registerTempTable("orders")

//ORDER ITEMS
val order_items=sc.textFile("file:///home/cloudera/Desktop/data/retail_db/order_items")
case class OrderItem(
  order_item_id: Int,
  order_item_order_id: Int,
  order_item_product_id: Int,
  order_item_quantity: Int,
  order_item_subtotal: Float,
  order_item_product_price: Float)

val order_itemsDF=order_items.map(rec=>{
val b=rec.split(",")
OrderItem(b(0).toInt,b(1).toInt,b(2).toInt,b(3).toInt,b(4).toFloat,b(5).toFloat)
}).toDF

order_itemsDF.registerTempTable("order_items")

//PRODUCTS
val products=sc.textFile("file:///home/cloudera/Desktop/data/retail_db/products").filter(record => record.split(",")(0).toInt!=685) 
case class Product(
  product_id: Int,
  product_category_id: Int,
  product_name: String,
  product_description: String,
  product_price: Float,
  product_image: String)

val productsDF=products.map(rec=>{
val b=rec.split(",")
Product(b(0).toInt,b(1).toInt,b(2),b(3),b(4).toFloat,b(5))
}).toDF

productsDF.registerTempTable("products")

//CATEGORIES
val categories=sc.textFile("file:///home/cloudera/Desktop/data/retail_db/categories")
case class Category(
  category_id: Int,
  category_department_id: Int,
  category_name: String)

val categoriesDF=categories.map(rec=>{
val b=rec.split(",")
Category(b(0).toInt,b(1).toInt,b(2))
}).toDF

categoriesDF.registerTempTable("categories")

//DEPARTMENTS
val departments=sc.textFile("file:///home/cloudera/Desktop/data/retail_db/departments")
case class Department(
  department_id: Int,
  department_name: String)

val departmentsDF=departments.map(rec=>{
val b=rec.split(",")
Department(b(0).toInt,b(1))
}).toDF

departmentsDF.registerTempTable("departments")

// Query
sqlContext.sql("SELECT department_name, order_date, SUM(order_item_subtotal) FROM orders JOIN order_items ON order_id=order_item_order_id JOIN products ON order_item_product_id=product_id JOIN categories ON product_category_id=category_id JOIN departments ON category_department_id=department_id WHERE order_status='COMPLETE' OR order_status='CLOSED' GROUP BY order_date,department_name ORDER BY order_date").collect().foreach(println)

 ---------------------------------------------------------------------------------------------------------------------
        select D.department_name, O.order_date, OI.order_item_subtotal
        from departments D join categories C on D.department_id=C.category_department_id
        join products P on C.category_id=P.product_category_id
        join order_items OI on P.product_id=OI.order_item_product_id
        join orders O on OI.order_item_order_id=O.order_id 
        where O.order_status IN ('CLOSED', 'COMPLETED') limit 10;
       
