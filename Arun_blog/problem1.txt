Every step solution:

sqoop import \
--connect jdbc:mysql://quickstart:3306/retail_db \
--username retail_dba \
--password cloudera \
--table orders \
--warehouse-dir /user/cloudera/Arun_problems/problem1 \
--compress \
--compression-codec org.apache.hadoop.io.compress.SnappyCodec \
--as-avrodatafile 


---------------------------------------------

sqoop import \
--connect jdbc:mysql://quickstart:3306/retail_db \
--username retail_dba \
--password cloudera \
--table order_items \
--warehouse-dir /user/cloudera/Arun_problems/problem1 \
--compress \
--compression-codec org.apache.hadoop.io.compress.SnappyCodec \
--as-avrodatafile 

-------------------------------------------
a. Problem solving using Data Frame API

import com.databricks.spark.avro._;

val orderDF = sqlContext.read.avro("/user/cloudera/Arun_problems/problem1/orders")
val orderItemsDF = sqlContext.read.avro("/user/cloudera/Arun_problems/problem1/order_items")
val joinedDF = orderDF.join(orderItemsDF, orderDF("order_id") === orderItemsDF("order_item_order_id"))

val AggDF = joinedDF.groupBy(to_date(from_unixtime(col("order_date")/1000)).alias("formatted_order_date"), col("order_status")).agg(round(sum(col("order_item_subtotal")),2).alias("total_amount"), countDistinct(col("order_id")).alias("total_orders"))

val SortedDF = AggDF.orderBy(col("formatted_order_date").desc, col("order_status"), col("total_amount").desc, col("total_orders"))

--------------------------------------------
b. Problem solving using Spark SQL 

import com.databricks.spark.avro._;

val orderDF = sqlContext.read.avro("/user/cloudera/Arun_problems/problem1/orders")
val orderItemsDF = sqlContext.read.avro("/user/cloudera/Arun_problems/problem1/order_items")
val joinedDF = orderDF.join(orderItemsDF, orderDF("order_id") === orderItemsDF("order_item_order_id"))

joinedDF.registerTempTable("order_joined")

val AggDF = sqlContext.sql("select to_date(from_unixtime(order_date/1000)) as formatted_order_date, order_status, cast(sum(order_item_subtotal) as decimal(10,2)) as total_amount, count(distinct(order_id)) as total_orders from order_joined group by order_date, order_status order by ")
